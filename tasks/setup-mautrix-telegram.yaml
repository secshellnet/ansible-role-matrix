---
- name: Create system user mautrix-telegram
  ansible.builtin.user:
    name: mautrix-telegram
    state: present
    system: yes
    home: /opt/mautrix-telegram
  become: true

- name: "Ensure pip and venv is installed"
  ansible.builtin.package:
    name: 
      - python3-pip
      - python3.11-venv
  become: true

- name: "Install mautrix-telegram"
  ansible.builtin.pip:
    name: mautrix-telegram[all]
    virtualenv: /opt/mautrix-telegram/venv
    virtualenv_command: python3 -m venv
  become: true  # required to create venv, python environment is managed system-wide

- name: "Check if config.yaml file already exists"
  ansible.builtin.stat:
    path: /opt/mautrix-telegram/config.yaml
  register: config_stat

- name: "Create config file"
  when:
    - not config_stat.stat.exists
  ansible.builtin.get_url:
    url: https://github.com/mautrix/telegram/raw/master/mautrix_telegram/example-config.yaml
    dest: /opt/mautrix-telegram/config.yaml
    owner: mautrix-telegram
    group: mautrix-telegram
    mode: "0600"  # contains passwords
  become: true
  become_user: "mautrix-telegram"

- name: "Ensure yq is available"
  ansible.builtin.package:
    name: yq
    state: present
  become: true

- name: "Set bridge permission dict as fact for next task"
  ansible.builtin.set_fact:
    bridge_permission: "{{ { '*': 'relaybot', '@' + matrix_user + ':' + matrix_domain: 'admin' } }}"

- name: "Adjust config.yaml"
  ansible.builtin.include_tasks: adjust-mautrix-config.yaml
  vars:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
    bridge: mautrix-telegram
  with_dict:
    - "homeserver.address": "https://{{ matrix_domain }}"
    - "homeserver.domain": "{{ matrix_domain }}"
    - "appservice.database": "postgres://{{ matrix_telegram_postgresql_username }}:{{ matrix_telegram_postgresql_password }}@{{ matrix_postgresql_hostname }}/{{ matrix_telegram_postgresql_database }}?sslmode=disable"
    - "appservice.bot_username": "tgbot"
    - "appservice.hostname": "127.0.0.1"
    - "bridge.permissions": "{{ bridge_permission }}"
    - "telegram.api_id": "{{ matrix_telegram_api_id }}"
    - "telegram.api_hash": "{{ matrix_telegram_api_hash }}"

- name: "Adjust config file permissions"
  ansible.builtin.file:
    path: /opt/mautrix-telegram/config.yaml
    owner: mautrix-telegram
    group: mautrix-telegram
    mode: "0600"  # contains passwords
  become: true

- name: "Create registration.yaml"
  ansible.builtin.include_tasks: create-mautrix-registration.yaml
  vars:
    bridge: "mautrix-telegram"
    exec: "/opt/mautrix-telegram/venv/bin/python -m mautrix_telegram"

- name: "Create service file"
  ansible.builtin.template:
    src: templates/mautrix-py.service.j2
    dest: /etc/systemd/system/mautrix-telegram.service
    owner: root
    group: root
    mode: "0644"
  vars:
    bridge: mautrix_telegram
  become: true

- name: "Enable and start mautrix-telegram"
  ansible.builtin.service:
    name: mautrix-telegram
    state: started
    enabled: true
  become: true

# TODO failed to start service:
# Nov 06 20:50:39 prod (python)[108729]:
#   mautrix-telegram.service:
#   Failed to determine user  credentials: No such process
# Nov 06 20:50:39 prod (python)[108729]: 
#   mautrix-telegram.service: Failed at step USER spawning 
#   /opt/mautrix-telegram/venv/bin/python: No such process
